#lang pollen
◊(define blerner-site "https://www.khoury.northeastern.edu/home/blerner/")
◊(define cs4410-site "https://course.ccs.neu.edu/cs4410/")

<style>
body {
  max-width: 620px; 
}
</style>

## Compilers

> "Compilers are perceived to be magical artifacts, carefully crafted
> by the wizards, and unfathomable by the mere mortals." - [Abdulaziz Ghuloum](http://scheme2006.cs.uchicago.edu/11-ghuloum.pdf)

One of the famous books on compilers is known as "The Dragon Book". The cover features a brave knight, wielding mighty tools:
the Syntax Directed Translation Shield and the LALR Parser Generator Sword. The dragon, massive in comparison to the small knight,
has scales marked Complexity of Compiler Design.

This blog post is my attempt to put what I learned in the first few lectures
of [Ben Lerner](◊blerner-site)'s [CS4410](◊cs4410-site) course in my own words.

### What is a Compiler?

A compiler is a program that consumes a program as input and produces another program.

`gcc` is a compiler. It compiles C programs to *binaries*, which you can think of as executables.

```C
// foo.c
#include <stdio.h>

int main() {
    printf("Hello, world!\n");
}
```

You can use `gcc` to compile `foo.c` to the executable `foo`.
Run the executable `foo`, and we see `Hello, World!` printed on the screen.

```shell
luke@mbp ~ % gcc foo.c -o foo
luke@mbp ~ % ./foo
Hello, world!
```

`gcc` gives programmers the ability turn C source code into a binary executable that a computer
can understand.

#### Compilers vs. Interpreters

```ocaml
let compile (src: source_program) : target_program = ...
let interpret (src: source_program) : value = ...
```

I learned in [PLAI](https://www.plai.org/) that compilers and interpreters are both *evaluators*—"An evaluator reduces
programs to values".

An interpreter consumes a program and runs it. In other words, it reduces a program all the way into a value.

```py
# foo.py

print("Hello, world!")
```

```shell
luke@mbp ~ % python foo.py
Hello, world!
```

We can clearly see that `python3 foo.py` takes in a program and executes the code directly, which is
why we see `"Hello, world!"` printed. This is in constrast with `gcc`, which produced another program.

Consider an important difference: after a compiler has compiled a program, the compiler
can be thrown away. However, throwing away an interpreter after evaluating a program would mean that program can no longer be run!

As mentioned earlier, a compiler consumes a program and produces another program. The resulting program is a
*reduced program*, meaning that it's *closer* to the point where an interpreter can run the program.

### A Simple Interpreter

Before designing a simple compiler, let's build an interpeter. The
`expr` type represents the source program.

```ocaml
type expr =
  | NumE of int64

type value = int64

let interpret (e: expr) : value =
  match e with
  | (NumE n) -> n
```

To make our source program more interesting, let's introduce new *syntax*.

```ocaml
type expr =
  | NumE of int64
  | Add1 of expr
  | Sub1 of expr

type value = int64

let rec interpret (e: expr) : value =
  match e with
  | (NumE n) -> n
  | (Add1 e') -> Int64.add 1L (interpret e')
  | (Sub1 e') -> Int64.sub (interpret e') 1L
```

### A Simple Compiler

```ocaml
type expr =
  | NumE of int64

type reg = 
  | RAX

type arg = 
  | Reg of reg
  | Const of int64

type instruction = 
  | IMov of (arg * arg)

let rec compile (e: expr) : instruction list =
  match e with
  | (NumE n) -> [IMov(Reg(RAX), Const(n))]
```
